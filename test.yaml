from flask import Flask, render_template, request, jsonify
import subprocess
import os
import yaml

app = Flask(__name__)

RULES_DIR = 'rules'

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/submit_rule', methods=['POST'])
def submit_rule():
    try:
        # Retrieve rule data from the form
        rule_name = request.form.get('rule_name', '')
        condition = request.form.get('condition', '')
        action = request.form.get('action', '')

        # Save rule to YAML file
        rule_filename = f"{rule_name}_rule.yaml"
        rule_filepath = os.path.join(RULES_DIR, rule_filename)

        rule_data = {
            'rule_name': rule_name,
            'condition': condition,
            'action': action
        }

        with open(rule_filepath, 'w') as yaml_file:
            yaml.dump(rule_data, yaml_file, default_flow_style=False)

        # Commit and push to GitHub
        subprocess.run(['git', 'add', RULES_DIR])
        subprocess.run(['git', 'commit', '-m', 'Add new rule'])
        subprocess.run(['git', 'push', 'origin', 'master'])

        return jsonify({'message': 'Rule submitted successfully'})
    except Exception as e:
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    app.run(debug=True)



=============================

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Rule Submission</title>
</head>
<body>
    <h1>Submit Rule</h1>
    <form action="/submit_rule" method="post">
        <label for="rule_name">Rule Name:</label>
        <input type="text" name="rule_name" required><br>

        <label for="condition">Condition:</label>
        <input type="text" name="condition" required><br>

        <label for="action">Action:</label>
        <input type="text" name="action" required><br>

        <button type="submit">Submit Rule</button>
    </form>
</body>
</html>



=======================

import requests

def trigger_pipeline():
    # Replace with your StreamSets pipeline trigger URL
    pipeline_trigger_url = 'http://your_streamsets_server:port/rest/v1/pipeline/your_pipeline_id/start'

    response = requests.post(pipeline_trigger_url)

    if response.status_code == 200:
        print('Pipeline triggered successfully')
    else:
        print(f'Error triggering pipeline. Status code: {response.status_code}')

if __name__ == '__main__':
    trigger_pipeline()
